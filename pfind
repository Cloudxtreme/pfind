#!/usr/bin/perl -w
# (c) 2012 Sergey Redin sergey@redin.info https://github.com/spiculator/pfind
use strict;
use Data::Dumper;
use Parse::Yapp;
die "pfind is only for linux\n" unless $^O eq "linux";
use POSIX qw/sysconf _SC_PAGESIZE/;
my $PAGESIZE = sysconf(_SC_PAGESIZE);
my $state = {};
my $vars = {};
# a copy of previous expression's result
# for things like -children/-parents/-descendants/-ancestors:
my $previous_list;
our $after_OR = undef;

my @preload = qw(
	%vsz := %statm::size
	%rss := %statm::resident
	%ppid := %stat::ppid
	%comm := %stat::comm
	%state := %stat::state
);

sub get_full_proc_list() {
	return $state->{"all"} if exists $state->{"all"};
	my $list = [];
	opendir PROC, "/proc" or die $!;
	while( readdir PROC ) {
		push @$list, $_ if /^\d+$/;
	}
	closedir PROC or die $!;
	$list = [ sort { $a <=> $b } @$list ];
	return ( $state->{"all"} = $list );
}

sub check_list($) {
	my $list = shift;
	if( not defined $list ) {
		die "list not defined";
	} elsif( not ref $list ) {
		$list eq "all" or die;
		return get_full_proc_list;
	} elsif( "ARRAY" eq ref $list ) {
		return $list;
	} else {
		die;
	}
}

sub read_file($) {
	my $path = shift;
	die $path unless defined $path and not ref $path;
	die "absolute path expected: $path\n" unless $path =~ /^\//;
	open FILE, "<", $path or return undef;
	my @contents = <FILE>;
	close FILE or return undef;
	return @contents;
}

sub read_line_from_file($) {
	my $path = shift;
	die $path unless defined $path and not ref $path;
	die "absolute path expected: $path\n" unless $path =~ /^\//;
	open FILE, "<", $path or return undef;
	my $line = <FILE>;
	return undef unless defined $line;
	close FILE or return undef;
	chomp $line;
	return $line;
}

sub get_stat($) {
	my $pid = shift;
	my $line = join "", read_file "/proc/$pid/stat"; # comm may be multi-line
	return undef unless defined $line;
	chomp $line;
	$line =~ /^(\d+) \((.*)\) (\w) (\d+(\s+-?\d+)+)$/s or die "bad stat: $line";
	my %out = ( pid => $1, comm => $2, state => $3 );
	my @rest = split /\s+/, $4;
	my @rest_names = qw(
		ppid pgrp session tty_nr tpgid flags
		minflt cminflt majflt cmajflt
		utime stime cutime cstime
		priority nice num_threads itrealvalue starttime
		vsize rss rsslim startcode endcode startstack
		kstkesp kstkeip signal blocked sigignore sigcatch
		wchan nswap cnswap exit_signal processor
		rt_priority policy delayacct_blkio_ticks guest_time cguest_time
	);
	while( @rest ) {
		my $value = shift @rest;
		last unless defined $value;
		my $name = shift @rest_names;
		$out{$name} = $value;
	}
	return \%out;
}

sub parse_statmlike_file($@) {
	my ($path, @names) = @_;
	die unless @names;
	my $out = {};
	my $line = read_line_from_file $path;
	return $out unless defined $line;
	$line =~ /^\d[\d\s]+$/ or die "bad line: $line";
	my @values = split /\s+/, $line;
	die "wrong number of values from $path\n" unless @values == @names;
	$out->{$_} = shift @values foreach @names;
	return $out;
}

sub get_statm($) {
	my $pid = shift;
	my $out = parse_statmlike_file( "/proc/$pid/statm",
		qw/size resident share text lib data dt/ );
	$out->{$_} *= $PAGESIZE foreach keys %$out;
	return $out;
}

my %multipliers = (
	B	=> 1,
	kB	=> 1024,
	KB	=> 1024,
	MB	=> 1024**2,
	GB	=> 1024**3,
	TB	=> 1024**4,
	PB	=> 1024**5,
	kiB	=> 1000,
	KiB	=> 1000,
	MiB	=> 1000**2,
	GiB	=> 1000**3,
	TiB	=> 1000**4,
	PiB	=> 1000**5,
);
sub fix_kb($) {
	my $value = shift;
	if( $value =~ /^(\d+)\s+(\w\w?B)$/ ) {
		my $multiplier = $multipliers{$2};
		die $value unless defined $multiplier;
		return $1 * $multiplier;
	} else {
		return $value;
	}
}

sub get_status($) {
	my $pid = shift;
	my $out = {};
	foreach ( read_file "/proc/$pid/status" ) {
		chomp;
		/^(\w+):\s+(.*)$/ or die "Bad line from status for $pid: $_\n";
		$out->{$1} = fix_kb $2;
	}
	return $out;
}

my %getters0 = (
	"pid"    => sub { return shift },
	"exe"	=> sub { readlink("/proc/$_[0]/exe") // "" },
	"cwd"	=> sub { readlink("/proc/$_[0]/cwd") // "" },
	"root"	=> sub { readlink("/proc/$_[0]/root") // "" },
);
my %getters1 = (
	"stat"	=> \&get_stat,
	"statm"	=> \&get_statm,
	"status" => \&get_status,
);

sub cached_get($$;@) {
	my ($pid, $name, @args) = @_;
	if( exists $getters0{$name} ) {
		0 == @args or die "function $name takes no arguments\n";
		$state->{$pid}{$name} //= $getters0{$name}->($pid);
		return $state->{$pid}{$name} // "(undef)";
	} elsif( exists $getters1{$name} ) {
		1 == @args or die "function $name takes one argument\n";
		my ($arg1) = @args;
		$state->{$pid}{$name} //= $getters1{$name}->($pid);
		return $state->{$pid}{$name}{$arg1} // "(undef)";
	} else {
		die "unknown function: $name";
	}
}

my %pattern2re_cache;
sub pattern2re($) {
	my $pattern = shift;
	my $re = $pattern2re_cache{$pattern};
	unless( $re ) {
		$re = $pattern;
		$re =~ s/([\\^.$|\(\)\[\]\{\}\+])/\\$1/g;
		$re =~ tr/?/./;
		$re =~ s/\*/.*/g;
		$re = "^$re\$";
		$re = qr/$re/;
		$pattern2re_cache{$pattern} = $re;
	}
	return $re;
}

sub func_list($) {
	my $list = shift;
	print "@$list\n";
	return $list;
}

my %sprintf_escapes = (
	a	=> "\a",
	b	=> "\b",
	f	=> "\f",
	n	=> "\n",
	r	=> "\r",
	t	=> "\t",
	0	=> "\0",
	"\\"	=> "\\",
);

sub get_value_for_printf($$) {
	my ($pid, $long_name) = @_;
	my ($name, @args) = split /::/, $long_name;
	if( @args > 1 ) {
		...
	} elsif( 1 == @args ) {
		return cached_get( $pid, $name, @args );
	} elsif( 0 == @args ) {
		return cached_get( $pid, $name );
	} else {
		die;
	}
}

sub process_arg($;$) {
	my ($arg, $list) = @_;
	die $list unless not defined $list or 'ARRAY' eq ref $list;
	my $quoted;
	if( ref $arg ) {
		'ARRAY' eq ref $arg or die;
		'QUOTE' eq $arg->[0] or die;
		2 == @$arg or die;
		$quoted = 1;
		$arg = $arg->[1];
	}
	# here $arg MUST be scalar, plus we have $quoted flag
	die $arg unless defined $arg and not ref $arg;
	# we return hashref (if defined $list) or scalar (else)
	if( not defined $list ) {
		return $arg if $quoted;
		my $rest = $arg;
		my $out = "";
		while( length $rest ) {
			if( $rest =~ /^\\x([01-9a-f]{2})(.*)$/ ) {
				$out .= chr hex $1;
				$rest = $2;
			} elsif( $rest =~ /^\\(.)(.*)$/ ) {
				my $add = $sprintf_escapes{$1} // "\\$1";
				$out .= $add;
				$rest = $2;
			} elsif( $rest =~ /^([^\\]+)(.*)$/ ) {
				$out .= $1;
				$rest = $2;
			} else {
				die;
			}
		}
		return $out;
	} elsif( $quoted ) {
		my %out = map { $_ => $arg } @$list;
		return \%out;
	} else { # defined $list and not $quoted
		my $out = { map { $_ => "" } @$list };
		my @rest = ( $arg );
		while( @rest ) {
			if( not length $rest[0] ) {
				shift @rest;
			} elsif( $rest[0] =~ /^([^\\%]+)(.*)$/ ) {
				$out->{$_} .= $1 for @$list;
				$rest[0] = $2;
			} elsif( $rest[0] =~ /^\\x([01-9a-f]{2})(.*)$/ ) {
				my $add = chr hex $1;
				$out->{$_} .= $add for @$list;
				$rest[0] = $2;
			} elsif( $rest[0] =~ /^\\(.)(.*)$/ ) {
				my $add = $sprintf_escapes{$1} // "\\$1";
				$out->{$_} .= $add for @$list;
				$rest[0] = $2;
			} elsif( $rest[0] =~ /^%(([a-z]\w*)(::[a-z]\w*)*)(.*)$/ ) {
				my ($exp, $name, $args) = ($1, $2, $3);
				$rest[0] = $4;
				if( $vars->{$name} ) {
					die "\%$name takes no args\n"
						if defined $args and length $args;
					unshift @rest, $vars->{$name};
				} else {
					foreach my $pid ( @$list ) {
						$out->{$pid} .= get_value_for_printf( $pid, $exp );
					}
				}
			} else {
				die "bad string: $rest[0]\n"
			}
		}
		return $out;
	}
}

sub func_printf($$) {
	my ($list, $format) = @_;
	my $out = process_arg( $format, $list );
	print join "", map { $out->{$_} } @$list;
	return $list;
}

sub func_print1($$) {
	my ($list, $string) = @_;
	print process_arg $string;
	return $list;
}

sub func_signal($$) {
	my ($list, $signal) = @_;
	$signal = process_arg $signal;
	$signal = uc $signal;
	return [ grep { kill $signal, $_ } @$list ];
}

sub func_additions($$$$) {
	my ($checklist, $name, $inc, $once) = @_;
	$after_OR or die "-$name must come after -or\n";
	my @out = ();
	my %previous = map { $_ => 1 } @$previous_list;
	my %left2check = map { $_ => 1 } @$checklist;
	delete $left2check{$_} foreach keys %previous;
	while( %previous and %left2check ) {
		# $inc MUST NOT change its arguments
		my @addition = $inc->( \%previous, \%left2check );
		last unless @addition;
		foreach my $pid ( @addition ) {
			next if $previous{$pid};
			die $pid unless $left2check{$pid};
			push @out, $pid;
			$previous{$pid} = 1;
			delete $left2check{$pid};
		}
		last if $once;
	}
	return [ @out ];
}

sub inc_children($$) {
	my ($previous, $left2check) = @_;
	my @addition;
	foreach my $pid ( keys %$left2check ) {
		my $ppid = cached_get( $pid, "stat", "ppid" );
		if( $previous->{$ppid} ) {
			push @addition, $pid;
		}
	}
	return @addition;
}
sub inc_parent($$) {
	my ($previous, $left2check) = @_;
	my @addition;
	foreach my $pid ( keys %$previous ) {
		my $ppid = cached_get( $pid, "stat", "ppid" );
		if( $left2check->{$ppid} ) {
			push @addition, $ppid;
		}
	}
	return @addition;
}

sub func_pids($$@) {
	my ($checklist, $marker, @pids) = @_;
	@pids = map { process_arg $_ } @pids;
	die "-pids takes only ';' end marker\n" unless $marker eq ';';
	die "-pids takes at least one argument\n" unless @pids;
	/^\d+$/ or die "non-numeric pid in -pids: $_\n" for @pids;
	my %ok = map { $_ => 1 } @$checklist;
	return [ grep { $ok{$_} } @pids ];
}

sub func_exec($$@) {
	my ($checklist, $marker, @args) = @_;
	die "-exec takes at least two arguments\n" unless @args;
	if( $marker eq '+' ) {
		@args = map { process_arg $_ } @args;
		my @cmdline = ( shift @args );
		my $count = 0;
		foreach( @args ) {
			if( $_ eq '{}' ) {
				push @cmdline, @$checklist;
				++$count;
			} else {
				push @cmdline, $_;
			}
		}
		1 == $count or die "-exec ... '+' expects exactly one '{}' argument\n";
		system( @cmdline );
		return $checklist;
	} elsif( $marker eq ';' ) {
		my $cmd = process_arg shift @args;
		my $ok;
		/%/ and $ok = 1 for @args;
		$ok or die "-exec ... ';' expects at least one variable argument\n";
		my @hashed_args = map {
			s/^{}$/%pid/;
			process_arg($_, $checklist)
		} @args;
		my @out = ();
		foreach my $pid ( @$checklist ) {
			my @cmdline = ($cmd);
			push @cmdline, map { $_->{$pid} } @hashed_args;
			system( @cmdline );
			push @out, $pid unless $? >> 8;
		}
		return [ @out ];
	} else {
		die;
	}
}

sub func_pidfile($$) {
	my ($checklist, $pidfile) = @_;
	$pidfile = process_arg $pidfile;
	my $pid = read_line_from_file $pidfile;
	return [] unless defined $pid;
	$pid =~ /^\d+$/ or return [];
	my %ok = map { $_ => 1 } @$checklist;
	$ok{$pid} or return [];
	return [ $pid ];
}

sub func_sort($$) {
	my ($checklist, $value) = @_;
	$value =~ /%/ or die "-sort expects unquoted variable argument\n";
	my $hashed_value = process_arg( $value, $checklist );
	return [ sort {
		$hashed_value->{$a} <=> $hashed_value->{$b}
	} @$checklist ];
}

sub func_head($$) {
	my ($checklist, $num) = @_;
	$num = process_arg $num;
	die "-head expects positive numeric argument\n"
		unless $num =~ /^\d+$/ and $num > 0;
	my $total = @$checklist;
	$num = $total if $num > $total;
	return [ @$checklist[0..$num-1] ];
}
sub func_tail($$) {
	my ($checklist, $num) = @_;
	$num = process_arg $num;
	die "-tail expects positive numeric argument\n"
		unless $num =~ /^\d+$/ and $num > 0;
	my $total = @$checklist;
	$num = $total if $num > $total;
	return [ @$checklist[$total-$num .. $total-1] ];
}

my %func0 = (
	"true"	=> sub { return $_[0] },
	"false"	=> sub { return [] },
	"list"	=> \&func_list,
	"kill"	=> sub { func_signal shift, "KILL" },
	"term"	=> sub { func_signal shift, "TERM" },
	"hup"	=> sub { func_signal shift, "HUP" },
	"children"	=> sub { func_additions( shift, "children", \&inc_children, 1 ) },
	"descendants"	=> sub { func_additions shift, "descendants", \&inc_children, undef },
	"parents"	=> sub { func_additions( shift, "parents", \&inc_parent, 1 ) },
	"ancestors"	=> sub { func_additions shift, "ancestors", \&inc_parent, undef },
);
my %func1 = (
	"printf"	=> \&func_printf,
	"print1"	=> \&func_print1,
	"signal"	=> \&func_signal,
	"ps"		=> sub { func_exec( shift, '+', 'ps', shift, '{}' ) },
	"pso"		=> sub { func_exec( shift, '+', 'ps', '-o', shift, '{}' ) },
	"pidfile"	=> \&func_pidfile,
	"sort"		=> \&func_sort,
	"head"		=> \&func_head,
	"tail"		=> \&func_tail,
);
my %func2 = (
	# reserved for user-defined functions
);
my %funcm = (
	"pids"		=> \&func_pids,
	"exec"		=> \&func_exec,
);
my %op2 = ( # do not firget to edit %op2_match and %op2_num!
	"-m"		=> sub { $_[0] =~ pattern2re $_[1] },
	"=@"		=> "-m",
	"-nm"		=> sub { $_[0] !~ pattern2re $_[1] },
	"!@"		=> "-nm",
	"=~"		=> sub { $_[0] =~ $_[1] },
	"!~"		=> sub { $_[0] !~ $_[1] },
	"=="		=> sub { $_[0] eq $_[1] },
	"!="		=> sub { $_[0] ne $_[1] },
	-eq		=> sub { $_[0] == $_[1] },
	-ne		=> sub { $_[0] != $_[1] },
	-lt		=> sub { $_[0] < $_[1] },
	-le		=> sub { $_[0] <= $_[1] },
	-gt		=> sub { $_[0] > $_[1] },
	-ge		=> sub { $_[0] >= $_[1] },
	":="		=> sub { die ":= is not a filter like other op2\n" },
);
# match operations have constant second argument:
my %op2_match = map {$_ => 1 } qw/ -m =@ -nm !@ =~ !~ /;
# arguments of numeric operations are checked to be numeric:
my %op2_num = map { $_ => 1 } qw/ -eq -ne -lt -le -gt -ge /;

sub assign($;$) {
	my ($name, $value) = @_;
	# we do not use process_arg(), this is probably not good
	die "variable name cannot be quoted in :=\n" if ref $name;
	die "variable value cannot be quoted in :=\n" if ref $value;
	die unless defined $name; # undefined $value will remove variable
	$name =~ /^%(\w+)$/ or
		die "first operand of := must be a variable name\n";
	$name = $1; # drop initial '%'
	$name =~ /^[a-zA-Z]/ or die "variable name must start with a letter\n";
	# upper case names are reserved for global (not per-PID) variables
	$name =~ /[A-Z]/ and die "variable name must be lower case\n";
	if( exists $vars->{$name} ) {
		"variable \%$name already exists\n";
	} elsif( not defined $value ) {
		delete $vars->{$name};
	} else {
		$vars->{$name} = $value;
	}
}

sub eval_op2($$$$) {
	my ($checklist, $name, $arg1, $arg2) = @_;
	die unless defined $name and not ref $name;
	if( $name eq ":=" ) {
		assign( $arg1, $arg2 );
		return $checklist;
	}
	my $code = $op2{$name};
	$code = $op2{$code} if not ref $code;
	die $name unless 'CODE' eq ref $code;
	if( $op2_match{$name} ) {
		my $hashed_arg1 = process_arg( $arg1, $checklist );
		$arg2 = process_arg $arg2;
		return [ grep {
			$code->( $hashed_arg1->{$_}, $arg2 )
		} @$checklist ];
	} else {
		my $hashed_arg1 = process_arg( $arg1, $checklist );
		my $hashed_arg2 = process_arg( $arg2, $checklist );
		if( $op2_num{$name} ) {
			foreach my $pid ( @$checklist ) {
				die "left operand '$hashed_arg1->{$pid}' of $name is not numeric for PID $pid\n"
					unless $hashed_arg1->{$pid} =~ /^[\-\+]?\d+$/;
				die "right operand '$hashed_arg2->{$pid}' of $name is not numeric for PID $pid\n"
					unless $hashed_arg2->{$pid} =~ /^[\-\+]?\d+$/;
			}
		}
		return [ grep {
			$code->( $hashed_arg1->{$_}, $hashed_arg2->{$_} )
		} @$checklist ];
	}
}

sub get_args($$$;$) {
	my ($cmdline, $funcname, $argnum, $desc) = @_;
	# argnum=0 for funcm (-pids/-exec) which ends with ';' or '+'
	$argnum =~ /^\d+$/ or die;
	my @args = ();
	for( my $i = 1; $i <= $argnum or not $argnum; $i++ ) {
		$desc ||= "argument $i for $funcname";
		@$cmdline or die "cannot get $desc\n";
		my $step1 = shift @$cmdline;
		if( not $argnum and $step1 =~ /^[;\+]$/ ) {
			unshift @args, $step1; # the end marker goes first
			last;
		} elsif( $step1 eq "-quote" ) {
			@$cmdline or die "cannot get quoted $desc\n";
			push @args, [ 'QUOTE', shift @$cmdline ];
		} else {
			die $step1 unless defined $step1
				and not ref $step1 and length $step1;
			push @args, $step1;
		}
	}
	return @args;
}

sub tokenize(@) {
	my @cmdline = @_;
	my @out = ();
	while(@cmdline) {
		my $a = shift @cmdline;
		if( $a =~ /^[\(\)\[\]\{\},]$/ ) { # parentheses and comma
			push @out, [ $a, $a ];
		} elsif( $a eq "!" or $a eq "-not" ) {
			push @out, [ 'NOT', $a ];
		} elsif( $a =~ /^-a(nd)?$/ ) {
			push @out, [ 'AND', $a ];
		} elsif( $a =~ /^-or?$/ ) {
			push @out, [ 'OR', $a ];
		} elsif( $a =~ /^-(\w+)$/ and $a ne '-quote' ) {
			my $name = $1;
			if( $func0{$name} ) {
				push @out, [ 'FUNC', [ 'FUNC', $name ] ];
			} elsif( $func1{$name} ) {
				push @out, [ 'FUNC', [ 'FUNC', $name,
					get_args(\@cmdline, $a, 1) ] ];
			} elsif( $func2{$name} ) {
				push @out, [ 'FUNC', [ 'FUNC', $name,
					get_args(\@cmdline, $a, 2) ] ];
			} elsif( $funcm{$name} ) {
				push @out, [ 'FUNC', [ 'FUNC', $name,
					get_args(\@cmdline, $a, 0) ] ];
			} else {
				die "unknown function: $name\n";
			}
		} else {
			unshift @cmdline, $a;
			my ($left) = get_args( \@cmdline, "(unknown)", 1,
				"left operand of unknown operation" );
			@cmdline or die "end of cmdline found where operation expected\n";
			my $op2name = shift @cmdline;
			$op2{$op2name} or die "unknown string '$op2name' found where operation expected\n";
			my ($right) = get_args( \@cmdline, $op2name, 1,
				"right operand of unknown operation" );
			push @out, [ 'OP2', [ 'OP2', $op2name, $left, $right ] ];
		}
	}
	return [ @out ];
}

sub mklexer($) {
	my $tokens_ref = shift;
	my @tokens = @$tokens_ref;
	return sub {
		if( @tokens ) {
			my $token = shift @tokens;
			return ( @$token );
		} else {
			return ( '', undef );
		}
	}
}

my $grammar = <<'GRAMMAR';
%%
exp:	comma_exp ;
comma_exp:
	or_exp
	| or_exp ',' comma_exp	{ [ 'COMMA', $_[1], $_[3] ] }
	;
or_exp:
	and_exp
	| or_exp OR and_exp	{ [ 'OR', $_[1], $_[3] ] }
	;
and_exp:
	not_exp
	| not_exp and and_exp	{ [ 'AND', $_[1], $_[3] ] }
	;
and:
	#empty
	| AND # -a | -and
	;
not_exp:
	atom
	| NOT not_exp		{ [ 'NOT', $_[2] ] }
	;
atom:
	FUNC
	| OP2
	| block
	;
block:
	'(' exp ')'		{ [ 'BLOCK', $_[2] ] }
	| '{' exp '}'		{ [ 'BLOCK', $_[2] ] }
	| '[' exp ']'		{ [ 'BLOCK', $_[2] ] }
	;
%%
GRAMMAR

sub mktree(@) {
	my @cmdline = @_;
	push @cmdline, "-true" unless @cmdline;

	my $grammar_parser = new Parse::Yapp( input => $grammar );
	eval $grammar_parser->Output(
		classname	=> "grammar_pfind",
	);
	die $@ if $@;

	my $parser = new grammar_pfind;
	return $parser->YYParse(
		yylex => mklexer( tokenize @cmdline ),
		yyerror => sub{ die "Parse error\n" },
	);
}

sub evalfunc($$@) {
	my ($list, $name, @args) = @_;
	if( $func0{$name} ) {
		die "function $name takes no args\n" if @args;
		return $func0{$name}->($list);
	} elsif( $func1{$name} ) {
		die "function $name takes 1 arg\n" unless 1 == @args;
		my ($arg1) = (@args);
		return $func1{$name}->($list, $arg1);
	} elsif( $func2{$name} ) {
		die "function $name takes 2 args\n" unless 2 == @args;
		my ($arg1, $arg2) = (@args);
		return $func2{$name}->($list, $arg1, $arg2);
	} elsif( $funcm{$name} ) {
		return $funcm{$name}->($list, @args);
	} else {
		die "unknown function: $name\n";
	}
}

sub lists_substract($$) {
	my ($arg1, $arg2) = @_;
	'ARRAY' eq ref $_ or die for @_;
	my %skip = map { $_ => 1 } @$arg2;
	return [ grep { not $skip{$_} } @$arg1 ];
}

sub lists_add($$) {
	my ($arg1, $arg2) = @_;
	'ARRAY' eq ref $_ or die for @_;
	my %skip = map { $_ => 1 } @$arg1;
	my @addition = grep { not $skip{$_} } @$arg2;
	return [ @$arg1, @addition ];
}

sub evaltree($$);
sub evaltree($$) {
	my ($list_ref, $tree_ref) = @_;
	'ARRAY' eq ref $tree_ref or die;
	my $list = [ @$list_ref ]; my (@tree) = (@$tree_ref); # make copies
	my $op = shift @tree;
	if( $op eq 'BLOCK' ) {
		local $after_OR = undef; # this is why BLOCK is needed
		1 == @tree or die "$op takes one arg\n";
		return evaltree( $list, $tree[0] );
	} elsif( $op eq 'NOT' ) {
		local $after_OR = undef;
		1 == @tree or die "$op takes one arg\n";
		my $exp_result = evaltree( $list, $tree[0] );
		return lists_substract( $list, $exp_result );
	} elsif( $op eq 'COMMA' ) {
		local $after_OR = undef;
		@tree > 1 or die "$op takes at least two args\n";
		my $out;
		foreach( @tree ) {
			$out = evaltree( $list, $_ );
			$previous_list = $out;
		}
		return $out;
	} elsif( $op eq 'OR' ) {
		@tree > 1 or die "$op takes at least two args\n";
		my $list2check = [ @$list ];
		my $list_result = [];
		my $first_arg = 1;
		foreach (@tree) {
			local $after_OR = not $first_arg;
			last unless @$list2check;
			my $out = evaltree( $list2check, $_ );
			$list2check = lists_substract( $list2check, $out );
			$list_result = lists_add( $list_result, $out );
			$previous_list = $list_result;
			$first_arg = undef;
		}
		return $list_result;
	} elsif( $op eq 'AND' ) {
		local $after_OR = undef;
		@tree > 1 or die "$op takes at least two args\n";
		$list = check_list $list;
		foreach (@tree) {
			last unless @$list;
			$list = evaltree( $list, $_ );
			$previous_list = $list;
		}
		return $list;
	} elsif( $op eq 'FUNC' ) {
		# $after_OR is not changed here
		@tree or die "no function name\n";
		my $name = shift @tree;
		$list = evalfunc( $list, $name, @tree );
		$previous_list = $list;
		return $list;
	} elsif( $op eq 'OP2' ) {
		# $after_OR is not changed here
		3 == @tree or die "$op takes three args\n";
		my ($op2name, $left, $right) = @tree;
		$list = eval_op2( $list, $op2name, $left, $right );
		$previous_list = $list;
		return $list;
	} else {
		die "unknown op: $op\n";
	}
}

my %is_action = map { $_ => 1 } qw(
	list printf print1
	signal kill term hup
	exec ps pso
);
sub tree_has_actions($);
sub tree_has_actions($) {
	my $tree = shift;
	my @copy = @$tree;
	my $op = shift @copy;;
	if( $op =~ /^(BLOCK|NOT|COMMA|OR|AND)$/ ) {
		foreach my $subtree (@copy) {
			return 1 if tree_has_actions($subtree);
		}
		return undef;
	} elsif( $op eq 'OP2' ) {
		return undef;
	} elsif( $op eq 'FUNC' ) {
		my $name = shift @copy;
		return $is_action{$name};
	} else {
		die "unknown op: $op\n";
	}
}

sub main() {
	my ($quiet, $dump_tree); # options
	while( @ARGV and $ARGV[0] =~ /^--/ ) {
		my $option = shift @ARGV;
		if( $option eq "--" ) {
			last;
		} elsif( $option eq "--quiet" ) {
			$quiet = 1;
		} elsif( $option eq "--dump-tree" ) {
			$dump_tree = 1;
		} else {
			die "Unknown option: $option\n";
		}
	}
	my $tree = mktree( @preload, @ARGV );
	if( $dump_tree ) {
		print Data::Dumper->Dump( [$tree], ["SyntaxTree"] );
		exit 0;
	}
	my $skip_print_list = $quiet || tree_has_actions($tree);
	my $value = evaltree( get_full_proc_list(), $tree );
	func_list($value) unless $skip_print_list;
	exit( @$value ? 0 : 1 );
}

main;
